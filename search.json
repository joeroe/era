[{"path":"https://era.joeroe.io/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to era","title":"Contributing to era","text":"era free open source (FOSS) software maintained interests open science. Contributions types welcome.","code":""},{"path":"https://era.joeroe.io/CONTRIBUTING.html","id":"new-era-definitions","dir":"","previous_headings":"","what":"New era definitions","title":"Contributing to era","text":"especially interested expanding built-eras defined package. can calendar system time scale uses years. suggest era inclusion package, please create new issue https://github.com/joeroe/rpaleoclim/issues. implement , can fork repository, : Add row tribble data-raw/era_table.R parameters new era “Source” data-raw/era_table.R regenerate export new era table Rebuild (devtools::build()) package check new era now returned era(\"<label>\") Run devtools::check() build package run automated tests Commit changes follow GitHub flow make pull request new era. possible, please include sources era parameters added pull request.","code":""},{"path":"https://era.joeroe.io/CONTRIBUTING.html","id":"bug-reports","dir":"","previous_headings":"","what":"Bug reports","title":"Contributing to era","text":"report bug problem, please create new issue https://github.com/joeroe/rpaleoclim/issues. Please include much information possible , can, minimal reproducible example (“reprex”).","code":""},{"path":"https://era.joeroe.io/CONTRIBUTING.html","id":"suggestions","dir":"","previous_headings":"","what":"Suggestions","title":"Contributing to era","text":"suggest new feature improvement, please create new issue https://github.com/joeroe/rpaleoclim/issues.","code":""},{"path":"https://era.joeroe.io/CONTRIBUTING.html","id":"code","dir":"","previous_headings":"","what":"Code","title":"Contributing to era","text":"contributions welcome, possible please follow conventions: R code, follow tidyverse style guide documentation, use roxygen2 add new functionality, write unit tests testthat Run devtools::check() build package run tests making pull request follow GitHub flow make pull request contributions.","code":""},{"path":"https://era.joeroe.io/CONTRIBUTING.html","id":"questions-and-comments","dir":"","previous_headings":"","what":"Questions and comments","title":"Contributing to era","text":"questions comments software, please feel free email maintainer joe@joeroe.io.","code":""},{"path":"https://era.joeroe.io/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Joe Roe Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://era.joeroe.io/articles/era.html","id":"yr","dir":"Articles","previous_headings":"","what":"Years with an era","title":"Years with an era","text":"Vectors years era represented yr (era_yr) class, constructed yr(): first argument numeric vector years. can integers doubles. second argument, era, defines numbering system associated years. object class era defines parameters calendar, epoch time scale. time, can simply specify abbreviated label era, looked standard eras defined eras(): yr_era() returns details era associated yr vector: yr_era(), pipe-friendly alias yr_set_era(), can also used set era existing object: Note updates vector’s era attribute; doesn’t change data . convert years one era another, need use yr_transform() function. yr vectors fit nicely tables, base data frames tibbles:","code":"yr(c(10000, 11000, 12000), \"BP\") #> # BP years <yr[3]>: #> [1] 10000 11000 12000 #> # Era: Before Present (BP): Gregorian years (365.2425 days), counted backwards from 1950 yr(c(10000, 11000, 12000), \"BCE\") #> # BCE years <yr[3]>: #> [1] 10000 11000 12000 #> # Era: Before Common Era (BCE): Gregorian years (365.2425 days), counted backwards from 1 yr(c(10000, 11000, 12000), \"uncal BP\") #> # uncal BP years <yr[3]>: #> [1] 10000 11000 12000 #> # Era: uncalibrated Before Present (uncal BP): radiocarbon years (NA days), counted backwards from 1950 yr(c(10000, 11000, 12000), \"ka\") #> # ka years <yr[3]>: #> [1] 10000 11000 12000 #> # Era: kiloannum (ka): 1000 Gregorian years (365.2425 days), counted backwards from 1950 neolithic <- yr(11700:7500, \"BP\") yr_era(neolithic) #> <era[1]> #> [1] Before Present (BP): Gregorian years (365.2425 days), counted backwards from 1950 chalcolithic <- 7500:6000 yr_era(chalcolithic) <- yr_era(neolithic) yr_era(chalcolithic) #> <era[1]> #> [1] Before Present (BP): Gregorian years (365.2425 days), counted backwards from 1950 postglacial <- tribble(   ~period,           ~start_ka,   \"Late Holocene\",   4.2,   \"Mid Holocene\",    8.326,   \"Early Holocene\",  11.7,   \"Younger Dryas\",   12.9,   \"Bølling-Allerød\", 14.7,   \"Heinrich 1\",      17.0 )  postglacial |>    mutate(start_ka = yr(start_ka, \"ka\")) #> # A tibble: 6 × 2 #>   period          start_ka #>   <chr>               <yr> #> 1 Late Holocene     4.2 ka #> 2 Mid Holocene    8.326 ka #> 3 Early Holocene   11.7 ka #> 4 Younger Dryas    12.9 ka #> 5 Bølling-Allerød  14.7 ka #> 6 Heinrich 1         17 ka"},{"path":"https://era.joeroe.io/articles/era.html","id":"era","dir":"Articles","previous_headings":"","what":"Era definitions","title":"Years with an era","text":"era includes built-definitions many time scales year numbering systems contemporary historic calendars. eras() returns full list built-definitions. can use definition list passing abbreviated label era() era argument yr() function package: need use time scale list, can define era(). Suggestions new eras include package also welcome; please create issue GitHub suggestions.","code":"era(\"BP\") #> <era[1]> #> [1] Before Present (BP): Gregorian years (365.2425 days), counted backwards from 1950  yr(10000, \"BP\") #> # BP years <yr[1]>: #> [1] 10000 #> # Era: Before Present (BP): Gregorian years (365.2425 days), counted backwards from 1950  yr_transform(yr(10000, \"BP\"), \"BCE\") #> # BCE years <yr[1]>: #> [1] 8051 #> # Era: Before Common Era (BCE): Gregorian years (365.2425 days), counted backwards from 1"},{"path":[]},{"path":"https://era.joeroe.io/articles/era.html","id":"defining-other-eras","dir":"Articles","previous_headings":"Era definitions","what":"Defining other eras","title":"Years with an era","text":"Eras defined era class following parameters: label: abbreviated label uniquely identifies era name: full name era epoch: origin year years counted (Gregorian astronomical years) unit: unit years counted, defined length solar days scale: number years represented one unit direction: whether years counted forwards (1) backwards (-1) epoch parameters passed era() construct era object. epoch, unit, scale, direction determine transformation eras; label name purely descriptive. can define arbitrary eras using era() function directly: long parameters specified correctly, user-defined eras can also used yr_transform().","code":"era(\"T.A.\", epoch = -9021, name = \"Third Age\", direction = 1) #> <era[1]> #> [1] Third Age (T.A.): Gregorian years (365.2425 days), counted forwards from -9021"},{"path":"https://era.joeroe.io/articles/era.html","id":"yr_transform","dir":"Articles","previous_headings":"","what":"Converting between eras: yr_transform()","title":"Years with an era","text":"Use yr_transform() convert eras: function implements generic algorithm transforming years based era parameters described . means , exceptions (see invalid transformations, can transform two eras can described era class.","code":"postglacial |>    mutate(start_ka = yr(start_ka, \"ka\")) |>    mutate(start_bp = yr_transform(start_ka, era(\"BP\")),          start_bce = yr_transform(start_ka, era(\"BCE\"))) #> # A tibble: 6 × 4 #>   period          start_ka start_bp start_bce #>   <chr>               <yr>     <yr>      <yr> #> 1 Late Holocene     4.2 ka  4200 BP  2251 BCE #> 2 Mid Holocene    8.326 ka  8326 BP  6377 BCE #> 3 Early Holocene   11.7 ka 11700 BP  9751 BCE #> 4 Younger Dryas    12.9 ka 12900 BP 10951 BCE #> 5 Bølling-Allerød  14.7 ka 14700 BP 12751 BCE #> 6 Heinrich 1         17 ka 17000 BP 15051 BCE"},{"path":"https://era.joeroe.io/articles/era.html","id":"transformation-precision","dir":"Articles","previous_headings":"Converting between eras: yr_transform()","what":"Transformation precision","title":"Years with an era","text":"default, era transformations exact: Often, precision necessary. example, converting years calendar- present-based eras, 74 year difference formal definition “Present” actual present rarely significant geologic time scale. Use precision argument yr_transform get rounded results:","code":"yr(500000, \"BCE\") |>    yr_transform(era(\"ka\")) #> # ka years <yr[1]>: #> [1] 501.949 #> # Era: kiloannum (ka): 1000 Gregorian years (365.2425 days), counted backwards from 1950 yr(10000, \"BP\") |>    yr_transform(era(\"BCE\"), precision = 1000) #> # BCE years <yr[1]>: #> [1] 8000 #> # Era: Before Common Era (BCE): Gregorian years (365.2425 days), counted backwards from 1  yr(500000, \"BCE\") |>    yr_transform(era(\"mya\"), precision = 0.1) #> # mya years <yr[1]>: #> [1] 0.5 #> # Era: million years ago (mya): 1000000 Gregorian years (365.2425 days), counted backwards from 1950"},{"path":"https://era.joeroe.io/articles/era.html","id":"invalidtransform","dir":"Articles","previous_headings":"Converting between eras: yr_transform()","what":"Invalid transformations","title":"Years with an era","text":"transformations possible. Notably, length ‘radiocarbon year’ well defined calendar time scale without calibration. Eras use non-calendar year unit represented NA cause error passed yr_transform(): c14_calibrate() stratigraphr package implements radiocarbon calibration yr objects. Conversion eras NA unit also error, following R convention NA == NA NA. words, don’t know whether two non-calendar units non-calendar unit. means possible use yr_transform() convert bp (radiocarbon years Present) bce (radiocarbon years Common Era) years, example.","code":"era_unit(era(\"uncal BP\")) #> <era_year[1]> #> [1] radiocarbon years (NA days) yr_transform(yr(9000, \"uncal BP\"), era(\"cal BP\")) #> Error in `yr_transform()`: #> ! Cannot transform uncalibrated Before Present to Before Present years: #> ✖ Calendar length of a radiocarbon year is undefined."},{"path":"https://era.joeroe.io/articles/era.html","id":"arithmetic","dir":"Articles","previous_headings":"","what":"Arithmetic with year vectors","title":"Years with an era","text":"yr class based vctrs, ensuring type- size-stable computations. example, can arithmetic year vectors: era: Note , comparing eras, parameters significant transformation considered (.e. label name). means possible combine year vectors differently-named functionally equivalent eras, example era(\"BP\") era(\"cal BP\"), although print warning loss information: Years coerced plain numeric vector computation means era longer makes sense:","code":"a <- yr(1500, \"CE\") b <- yr(2020, \"CE\") b - a #> # CE years <yr[1]>: #> [1] 520 #> # Era: Common Era (CE): Gregorian years (365.2425 days), counted forwards from 0 c <- yr(0.5, \"ka\") b - c #> Error in `vec_cast.era_yr.era_yr()`: #> ! Can't convert `y` <yr (ka)> to <yr (CE)>. #> Reconcile eras with yr_transform() first. era(\"BP\") == era(\"BC\") #> [1] FALSE era(\"BP\") == era(\"cal BP\") #> [1] TRUE  yr(1000, \"BP\") + yr(1000, \"cal BP\") #> Warning: eras have different label or name parameters. #> # BP years <yr[1]>: #> [1] 2000 #> # Era: Before Present (BP): Gregorian years (365.2425 days), counted backwards from 1950 a * b #> [1] 3030000"},{"path":"https://era.joeroe.io/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joe Roe. Author, maintainer.","code":""},{"path":"https://era.joeroe.io/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Roe J (2024). era: Year-Based Time Scales. R package version 0.5.0, https://github.com/joeroe/era, https://era.joeroe.io.","code":"@Manual{,   title = {era: Year-Based Time Scales},   author = {Joe Roe},   year = {2024},   note = {R package version 0.5.0, https://github.com/joeroe/era},   url = {https://era.joeroe.io}, }"},{"path":"https://era.joeroe.io/index.html","id":"era-","dir":"","previous_headings":"","what":"Year-Based Time Scales","title":"Year-Based Time Scales","text":"era R package provides consistent representation year-based time scales numeric vector associated era – yr class. includes built-era definitions many year numbering systems used contemporary historic calendars (e.g. Common Era, Islamic ‘Hijri’ years); year-based time scales used archaeology, astronomy, geology, palaeosciences (e.g. Present, SI-prefixed annus); support arbitrary user-defined eras. Years can converted one era another using generalised transformation function yr_transform(). era’s classes based vctrs, come methods robust casting coercion years numeric types, type-stable arithmetic years, pretty-printing tables.","code":""},{"path":"https://era.joeroe.io/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Year-Based Time Scales","text":"can install released version era CRAN : development version GitHub using remotes package:","code":"install.packages(\"era\") # install.packages(\"remotes\") remotes::install_github(\"joeroe/era\")"},{"path":"https://era.joeroe.io/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Year-Based Time Scales","text":"yr() defines era associated vector years: Use yr_transform() convert eras: Many common calendar systems time scales predefined (see ?eras()) can referenced abbreviated labels. eras can defined using era() function directly. usage, see package introduction (vignette(\"era\")).","code":"library(era) x <- yr(c(9000, 8000, 7000), \"cal BP\") x #> # cal BP years <yr[3]>: #> [1] 9000 8000 7000 #> # Era: Before Present (cal BP): Gregorian years (365.2425 days), counted backwards from 1950 yr_transform(x, \"BCE\") #> # BCE years <yr[3]>: #> [1] 7051 6051 5051 #> # Era: Before Common Era (BCE): Gregorian years (365.2425 days), counted backwards from 1"},{"path":"https://era.joeroe.io/reference/era-rlang.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal rlang methods — era-rlang","title":"Internal rlang methods — era-rlang","text":"Internal rlang methods","code":""},{"path":"https://era.joeroe.io/reference/era-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — era-vctrs","title":"Internal vctrs methods — era-vctrs","text":"Internal vctrs methods","code":""},{"path":"https://era.joeroe.io/reference/era.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an era object — era","title":"Create an era object — era","text":"era object defines time scale associated vector years (see yr()). era() returns era object, either looking label standard eras defined eras() , one argument given, constructing new definition specified parameters.","code":""},{"path":"https://era.joeroe.io/reference/era.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an era object — era","text":"","code":"era(   label = character(),   epoch = NULL,   name = label,   unit = era_year(\"Gregorian\"),   scale = 1,   direction = -1 )"},{"path":"https://era.joeroe.io/reference/era.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an era object — era","text":"label Character. one argument given era(), abbreviated label standard era defined eras(). Otherwise, label give era constructed using following arguments. epoch Numeric. Epoch year years counted Gregorian astronomical years (.e. \"year zero\"). name Character. Full name era. Defaults value label. unit era_year() object describing name year unit average length solar days. Defaults Gregorian year (365.2425 days). scale Integer. Number years represented one unit, e.g. 1000 ka. Default: 1. direction years counted backwards (-1) (default) forwards (1) epoch?","code":""},{"path":"https://era.joeroe.io/reference/era.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an era object — era","text":"object class era.","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/era.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an era object — era","text":"","code":"era(\"cal BP\") #> <era[1]> #> [1] Before Present (cal BP): Gregorian years (365.2425 days), counted backwards from 1950  era(\"T.A.\", epoch = -9021, name = \"Third Age\", direction = 1) #> <era[1]> #> [1] Third Age (T.A.): Gregorian years (365.2425 days), counted forwards from -9021"},{"path":"https://era.joeroe.io/reference/era_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parameters of an era — era_parameters","title":"Get parameters of an era — era_parameters","text":"Extracts specific parameter era object.","code":""},{"path":"https://era.joeroe.io/reference/era_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parameters of an era — era_parameters","text":"","code":"era_label(x)  era_epoch(x)  era_name(x)  era_unit(x)  era_scale(x)  era_direction(x)"},{"path":"https://era.joeroe.io/reference/era_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parameters of an era — era_parameters","text":"x era object.","code":""},{"path":"https://era.joeroe.io/reference/era_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parameters of an era — era_parameters","text":"Value parameter.","code":""},{"path":"https://era.joeroe.io/reference/era_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get parameters of an era — era_parameters","text":"available parameters : label – unique, abbreviated label era, e.g. \"cal BP\" epoch – year origin era, e.g. 1950 Present name – full name era, e.g. \"calendar years Present\" unit – unit years used, era_year() object scale – multiple years used, e.g. 1000 ka/kiloannum direction – whether years counted \"backwards\" \"forwards\" epoch #'","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/era_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parameters of an era — era_parameters","text":"","code":"x <- era(\"cal BP\") era_name(x) #> [1] \"Before Present\""},{"path":"https://era.joeroe.io/reference/era_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Year units — era_year","title":"Year units — era_year","text":"era_year objects describe unit used year length days. value used era definition (era()) enable conversions eras use different units (yr_transform()).","code":""},{"path":"https://era.joeroe.io/reference/era_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year units — era_year","text":"","code":"era_year(label = character(), days = 365.2425)"},{"path":"https://era.joeroe.io/reference/era_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year units — era_year","text":"label Character. Name year unit. days Numeric. Average length year solar days. Defaults Gregorian year (365.2425 days).","code":""},{"path":"https://era.joeroe.io/reference/era_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year units — era_year","text":"S3 vector class era_year.","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/era_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Year units — era_year","text":"","code":"era_year(\"Julian\", 365.25) #> <era_year[1]> #> [1] Julian years (365.25 days)"},{"path":"https://era.joeroe.io/reference/era_year_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the parameters of an era_year object. — era_year_parameters","title":"Get the parameters of an era_year object. — era_year_parameters","text":"Extracts specific parameter year unit object constructed era_year().","code":""},{"path":"https://era.joeroe.io/reference/era_year_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the parameters of an era_year object. — era_year_parameters","text":"","code":"era_year_label(x)  era_year_days(x)"},{"path":"https://era.joeroe.io/reference/era_year_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the parameters of an era_year object. — era_year_parameters","text":"x object class era_year.","code":""},{"path":"https://era.joeroe.io/reference/era_year_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the parameters of an era_year object. — era_year_parameters","text":"Value parameter.","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/era_year_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the parameters of an era_year object. — era_year_parameters","text":"","code":"julian <- era_year(\"Julian\", 365.25) era_year_label(julian) #> [1] \"Julian\" era_year_days(julian) #> [1] 365.25"},{"path":"https://era.joeroe.io/reference/eras.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard era definitions — eras","title":"Standard era definitions — eras","text":"Definitions common eras time scales. eras() lists available era definitions. eras(label) looks specific era unique, abbreviated name (e.g. \"cal BP\").","code":""},{"path":"https://era.joeroe.io/reference/eras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard era definitions — eras","text":"","code":"eras(label = NA)"},{"path":"https://era.joeroe.io/reference/eras.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard era definitions — eras","text":"label (Optional) Abbreviated names(s) eras look .","code":""},{"path":"https://era.joeroe.io/reference/eras.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard era definitions — eras","text":"table era definitions. can passed era() construct era object.","code":""},{"path":"https://era.joeroe.io/reference/eras.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standard era definitions — eras","text":"Looking eras label uses partial matching.","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/eras.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard era definitions — eras","text":"","code":"# List all available eras eras() #> # A tibble: 33 × 6 #>    label  epoch name                    unit      scale direction #>    <chr>  <dbl> <chr>             <era_year>      <int>     <dbl> #>  1 BP      1950 Before Present     Gregorian          1        -1 #>  2 cal BP  1950 Before Present     Gregorian          1        -1 #>  3 BC         1 Before Christ      Gregorian          1        -1 #>  4 BCE        1 Before Common Era  Gregorian          1        -1 #>  5 AD         0 Anno Domini        Gregorian          1         1 #>  6 CE         0 Common Era         Gregorian          1         1 #>  7 a       1950 annum              Gregorian          1        -1 #>  8 ka      1950 kiloannum          Gregorian       1000        -1 #>  9 Ma      1950 megaannum          Gregorian    1000000        -1 #> 10 Ga      1950 gigaannum          Gregorian 1000000000        -1 #> # ℹ 23 more rows  # Look up a specific era by label eras(\"cal BP\") #> # A tibble: 1 × 6 #>   label  epoch name                 unit scale direction #>   <chr>  <dbl> <chr>          <era_year> <int>     <dbl> #> 1 cal BP  1950 Before Present  Gregorian     1        -1  # With partial matching eras(\"cal\") #> # A tibble: 1 × 6 #>   label  epoch name                 unit scale direction #>   <chr>  <dbl> <chr>          <era_year> <int>     <dbl> #> 1 cal BP  1950 Before Present  Gregorian     1        -1"},{"path":"https://era.joeroe.io/reference/is_era.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation functions for era objects — is_era","title":"Validation functions for era objects — is_era","text":"Tests whether object era definition (era object). is_era() tests whether object inherits S3 class era_yr. is_valid_era() performs additional checks determine whether object well-formed (see details). validate_era() throws informative error message invalid yrs.","code":""},{"path":"https://era.joeroe.io/reference/is_era.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation functions for era objects — is_era","text":"","code":"is_era(x)  validate_era(x)  is_valid_era(x)"},{"path":"https://era.joeroe.io/reference/is_era.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation functions for era objects — is_era","text":"x Object test.","code":""},{"path":"https://era.joeroe.io/reference/is_era.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validation functions for era objects — is_era","text":"is_era() is_valid_era() return TRUE FALSE. validate_era() returns x invisibly, used side-effect throwing informative error invalid objects.","code":""},{"path":"https://era.joeroe.io/reference/is_era.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validation functions for era objects — is_era","text":"Valid era objects: Must parameters set NA Must character label parameter Must numeric epoch parameter Must character name parameter Must character unit parameter one defined units Must positive, integer scale parameter Must direction parameter -1 (backwards) 1 (forwards)","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/is_era_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation functions for era_year objects — is_era_year","title":"Validation functions for era_year objects — is_era_year","text":"Tests whether object class era_year (constructed era_year()).","code":""},{"path":"https://era.joeroe.io/reference/is_era_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation functions for era_year objects — is_era_year","text":"","code":"is_era_year(x)"},{"path":"https://era.joeroe.io/reference/is_era_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation functions for era_year objects — is_era_year","text":"x Object test.","code":""},{"path":"https://era.joeroe.io/reference/is_era_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validation functions for era_year objects — is_era_year","text":"TRUE FALSE.","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/is_era_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validation functions for era_year objects — is_era_year","text":"","code":"is_era_year(era_year(\"Julian\", 365.25)) #> [1] TRUE"},{"path":"https://era.joeroe.io/reference/is_yr.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation functions for yr objects — is_yr","title":"Validation functions for yr objects — is_yr","text":"Tests whether object vector years era (yr object). is_yr() tests whether object inherits S3 class era_yr. is_valid_yr() performs additional checks determine whether object well-formed (see details). validate_yr() throws informative error message invalid yrs.","code":""},{"path":"https://era.joeroe.io/reference/is_yr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation functions for yr objects — is_yr","text":"","code":"is_yr(x)  validate_yr(x)  is_valid_yr(x)"},{"path":"https://era.joeroe.io/reference/is_yr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation functions for yr objects — is_yr","text":"x Object test.","code":""},{"path":"https://era.joeroe.io/reference/is_yr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validation functions for yr objects — is_yr","text":"is_yr() is_valid_yr() return TRUE FALSE. validate_yr() returns x invisibly, used side-effect throwing informative error invalid objects.","code":""},{"path":"https://era.joeroe.io/reference/is_yr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validation functions for yr objects — is_yr","text":"Valid yr objects: Must contain numeric data (NAs allowed) Must era attribute set NA Must one era Must era attribute valid era object (see validate_era())","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/is_yr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validation functions for yr objects — is_yr","text":"","code":"x <- yr(5000:5050, era(\"cal BP\")) is_yr(x) #> [1] TRUE is_valid_yr(x) #> [1] TRUE validate_yr(x)"},{"path":"https://era.joeroe.io/reference/this_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Current year — this_year","title":"Current year — this_year","text":"Returns current year year vector, era system specified era.","code":""},{"path":"https://era.joeroe.io/reference/this_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current year — this_year","text":"","code":"this_year(era = \"CE\")"},{"path":"https://era.joeroe.io/reference/this_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current year — this_year","text":"era era object label understood era(). Defaults Common Era (era(\"CE\")).","code":""},{"path":"https://era.joeroe.io/reference/this_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current year — this_year","text":"yr vector current year.","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/this_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current year — this_year","text":"","code":"# This year in the Common Era this_year() #> # CE years <yr[1]>: #> [1] 2024 #> # Era: Common Era (CE): Gregorian years (365.2425 days), counted forwards from 0 # This year in the Holocene Epoch this_year(\"HE\") #> # HE years <yr[1]>: #> [1] 12024 #> # Era: Holocene Era (HE): Gregorian years (365.2425 days), counted forwards from -10000"},{"path":"https://era.joeroe.io/reference/yr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector of years with era — yr","title":"Create a vector of years with era — yr","text":"yr object represents years associated calendar era time scale.","code":""},{"path":"https://era.joeroe.io/reference/yr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector of years with era — yr","text":"","code":"yr(x = numeric(), era = character())"},{"path":"https://era.joeroe.io/reference/yr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector of years with era — yr","text":"x numeric vector years. era calendar era used x. Either: string matching one standard era labels defined eras() era object constructed era()","code":""},{"path":"https://era.joeroe.io/reference/yr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vector of years with era — yr","text":"yr (era_yr) object.","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/yr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vector of years with era — yr","text":"","code":"# The R Age yr(1993:2020, \"CE\") #> # CE years <yr[28]>: #>  [1] 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 #> [16] 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 #> # Era: Common Era (CE): Gregorian years (365.2425 days), counted forwards from 0  # A bad movie yr(10000, \"BC\") #> # BC years <yr[1]>: #> [1] 10000 #> # Era: Before Christ (BC): Gregorian years (365.2425 days), counted backwards from 1"},{"path":"https://era.joeroe.io/reference/yr_era.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the era of a vector of years — yr_era","title":"Get or set the era of a vector of years — yr_era","text":"Functions extracting assigning era vector years. function alter underlying values x. Use yr_transform() convert values yr vector new era.","code":""},{"path":"https://era.joeroe.io/reference/yr_era.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the era of a vector of years — yr_era","text":"","code":"yr_era(x)  yr_set_era(x, era)  yr_era(x) <- value"},{"path":"https://era.joeroe.io/reference/yr_era.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the era of a vector of years — yr_era","text":"x vector years. value, era era object (see era()) assigned x.","code":""},{"path":"https://era.joeroe.io/reference/yr_era.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the era of a vector of years — yr_era","text":"yr_era(x) returns existing era associated x. yr_set_era(x, era) yr_era(x) <- era return x new era assigned. x already yr vector, attempt coerce one.","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/yr_era.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the era of a vector of years — yr_era","text":"","code":"x <- 5000:5050 yr_era(x) <- era(\"cal BP\") yr_era(x) #> <era[1]> #> [1] Before Present (cal BP): Gregorian years (365.2425 days), counted backwards from 1950"},{"path":"https://era.joeroe.io/reference/yr_extremes.html","id":null,"dir":"Reference","previous_headings":"","what":"Chronological minima and maxima — yr_extremes","title":"Chronological minima and maxima — yr_extremes","text":"Returns chronologically earliest /latest value vector years, .e. era-aware version min(), max(), range().","code":""},{"path":"https://era.joeroe.io/reference/yr_extremes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chronological minima and maxima — yr_extremes","text":"","code":"yr_earliest(x, na.rm = FALSE)  yr_latest(x, na.rm = FALSE)  yr_range(x, na.rm = FALSE)"},{"path":"https://era.joeroe.io/reference/yr_extremes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chronological minima and maxima — yr_extremes","text":"x yr vector era na.rm logical indicating whether missing values removed","code":""},{"path":"https://era.joeroe.io/reference/yr_extremes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chronological minima and maxima — yr_extremes","text":"yr_earliest() yr_leatest(), yr vector length 1 earliest latest value. yr_range(), yr vector length 2 earliest latest value (order). x contains NA values na.rm = FALSE (default), NAs returned.","code":""},{"path":"https://era.joeroe.io/reference/yr_extremes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chronological minima and maxima — yr_extremes","text":"implemented prefixed functions rather S3 min(), max(), range() methods yrs avoid surprises numerical (.e. chronological) extremes expected.","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/yr_extremes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chronological minima and maxima — yr_extremes","text":"","code":"# Forward-counting era: x <- yr(c(200, 100, 300), \"CE\") yr_earliest(x) #> # CE years <yr[1]>: #> [1] 100 #> # Era: Common Era (CE): Gregorian years (365.2425 days), counted forwards from 0 yr_latest(x) #> # CE years <yr[1]>: #> [1] 300 #> # Era: Common Era (CE): Gregorian years (365.2425 days), counted forwards from 0 yr_range(x) #> # CE years <yr[2]>: #> [1] 100 300 #> # Era: Common Era (CE): Gregorian years (365.2425 days), counted forwards from 0  # Backward-counting era: y <- yr(c(200, 100, 300), \"BCE\") yr_earliest(y) #> # BCE years <yr[1]>: #> [1] 300 #> # Era: Before Common Era (BCE): Gregorian years (365.2425 days), counted backwards from 1 yr_latest(y) #> # BCE years <yr[1]>: #> [1] 100 #> # Era: Before Common Era (BCE): Gregorian years (365.2425 days), counted backwards from 1 yr_range(x) #> # CE years <yr[2]>: #> [1] 100 300 #> # Era: Common Era (CE): Gregorian years (365.2425 days), counted forwards from 0"},{"path":"https://era.joeroe.io/reference/yr_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Chronological ordering of year vectors — yr_sort","title":"Chronological ordering of year vectors — yr_sort","text":"Sorts vector years earliest--latest latest--earliest chronological order based era.","code":""},{"path":"https://era.joeroe.io/reference/yr_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chronological ordering of year vectors — yr_sort","text":"","code":"yr_sort(x, reverse = FALSE, ...)"},{"path":"https://era.joeroe.io/reference/yr_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chronological ordering of year vectors — yr_sort","text":"x yr vector era reverse Set FALSE (default) chronological order (earliest latest) TRUE reverse chronological order (latest earliest). ... arguments passed sort(); particular use na.last control NA handling.","code":""},{"path":"https://era.joeroe.io/reference/yr_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chronological ordering of year vectors — yr_sort","text":"Sorted yr vector","code":""},{"path":"https://era.joeroe.io/reference/yr_sort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chronological ordering of year vectors — yr_sort","text":"implemented prefixed function rather S3 sort() method yrs avoid surprises numerical (.e. chronological) sorting expected.","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/yr_sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chronological ordering of year vectors — yr_sort","text":"","code":"# Forward-counting era: x <- yr(c(200, 100, 300), \"CE\") yr_sort(x) #> # CE years <yr[3]>: #> [1] 100 200 300 #> # Era: Common Era (CE): Gregorian years (365.2425 days), counted forwards from 0 yr_sort(x, reverse = TRUE) #> # CE years <yr[3]>: #> [1] 300 200 100 #> # Era: Common Era (CE): Gregorian years (365.2425 days), counted forwards from 0  # Backward-counting era: y <- yr(c(200, 100, 300), \"BCE\") yr_sort(y) #> # BCE years <yr[3]>: #> [1] 300 200 100 #> # Era: Before Common Era (BCE): Gregorian years (365.2425 days), counted backwards from 1 yr_sort(y, reverse = TRUE) #> # BCE years <yr[3]>: #> [1] 100 200 300 #> # Era: Before Common Era (BCE): Gregorian years (365.2425 days), counted backwards from 1"},{"path":"https://era.joeroe.io/reference/yr_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert years from one era to another — yr_transform","title":"Convert years from one era to another — yr_transform","text":"Transform vector years one era another.","code":""},{"path":"https://era.joeroe.io/reference/yr_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert years from one era to another — yr_transform","text":"","code":"yr_transform(x, era = yr_era(x), precision = NA)"},{"path":"https://era.joeroe.io/reference/yr_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert years from one era to another — yr_transform","text":"x yr object. vector years era, see yr(). era era object describing target era, see era(). precision Desired precision transformation, .e. transformed values rounded nearest precision. NA (default), rounding performed exact transformed value returned.","code":""},{"path":"https://era.joeroe.io/reference/yr_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert years from one era to another — yr_transform","text":"yr object era specified era.","code":""},{"path":"https://era.joeroe.io/reference/yr_transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert years from one era to another — yr_transform","text":"Transformation eras uses scale, epoch, direction unit parameters era definition. NA values parameters source destination era cause error. often encountered either measured 'radiocarbon years', related calendar time scale without calibration un-calibration. transformation function exact treats years real number scale. means transformations eras different year units (e.g. Gregorian Julian) /epochs aligned 1 January Gregorian calendar (e.g. Common Era Islamic calendars) likely return non-integer values. precision argument provides convenient way round result need level precision. also useful working around ambiguous definition 'present' various geological time-scales.","code":""},{"path":[]},{"path":"https://era.joeroe.io/reference/yr_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert years from one era to another — yr_transform","text":"","code":"x <- yr(10010:10001, \"cal BP\") yr_transform(x, era(\"BCE\")) #> # BCE years <yr[10]>: #>  [1] 8061 8060 8059 8058 8057 8056 8055 8054 8053 8052 #> # Era: Before Common Era (BCE): Gregorian years (365.2425 days), counted backwards from 1  yr_transform(x, era(\"ka\"), precision = 1) #> # ka years <yr[10]>: #>  [1] 10 10 10 10 10 10 10 10 10 10 #> # Era: kiloannum (ka): 1000 Gregorian years (365.2425 days), counted backwards from 1950"},{"path":"https://era.joeroe.io/news/index.html","id":"era-050","dir":"Changelog","previous_headings":"","what":"era 0.5.0","title":"era 0.5.0","text":"New yr_sort() function chronological ordering year vectors (#44) New yr_earliest(), yr_latest(), yr_range() functions chronological extremes year vectors (#43)","code":""},{"path":"https://era.joeroe.io/news/index.html","id":"era-041","dir":"Changelog","previous_headings":"","what":"era 0.4.1","title":"era 0.4.1","text":"CRAN release: 2022-11-17 patch fixes malfunctioning test causing CRAN checks fail. significant changes. Fixed malfunctioning check","code":""},{"path":"https://era.joeroe.io/news/index.html","id":"era-040","dir":"Changelog","previous_headings":"","what":"era 0.4.0","title":"era 0.4.0","text":"CRAN release: 2022-03-09 Anno Mundi (Hebrew calendar) Sidereal, tropical, anomalistic astronomic years #15 Hebrew lunisolar years precise epoch value Hijri eras: 621.5394 instead 622. precise epoch value Nowruz (Solar Hijri) eras: 621.2218 instead 622. Fixed recurring issues related absence year 0 BCE/CE #4 this_year() now considers current date, returns floored integer (.e. actual current calendar year), vectorised era. Added pillar printing methods era (#33) era_year (#34) tibbles Class constructors era() yr() now return zero-length vector called arguments (instead error), allowing used prototypes era_yr objects can now cast character vectors (e.g. .character(yr(1, \"BP\"))) Combining otherwise equivalent eras different names labels c() now triggers warning (#27), consistent combining using arithmetic (#3) era package longer exports magrittr’s pipe operator (%>%)","code":""},{"path":"https://era.joeroe.io/news/index.html","id":"era-031","dir":"Changelog","previous_headings":"","what":"era 0.3.1","title":"era 0.3.1","text":"CRAN release: 2021-01-29 CRAN release. Fixed moved link README","code":""},{"path":"https://era.joeroe.io/news/index.html","id":"era-030","dir":"Changelog","previous_headings":"","what":"era 0.3.0","title":"era 0.3.0","text":"Second beta / CRAN pre-release. Islamic calendars (Lunar Hijri, Solar Hijri). Julian calendar Unit now represented era_year class, describes length solar days well name. Added functions constructing working era_year objects: era_year(), is_era_year(), era_year_label(), era_year_days(). Direction now coded 1 (“forwards”) -1 (“backwards”). previous character arguments still work deprecated. Equality tests eras now check significant parameters (.e. “label” “name”), allowing coercion functionally equivalent eras, e.g. yr(1, \"BP\") + yr(1, \"cal BP\") now works (warning) (#3). Can now convert eras different year units (#25). Now precision argument, allowing result rounded (#23). era yr objects now validated constructed, using new functions validate_era()/is_valid_era() validate_yr()/is_valid_yr() (#7 #8). Added this_year(), returns current year yr object. era(NA) now returns error, vector standard eras (#20). era arguments functions can now accept character vector (#20) era(<era>) now returns era parameters (enable ) Various additions make coercion hierarchy era_yrs consistent; notably, common prototype era_yr, integer, double, now era_yr. Fixed printing NA eras (#9) Errors now use rlang format general informative (#26 #28)","code":""},{"path":"https://era.joeroe.io/news/index.html","id":"era-020","dir":"Changelog","previous_headings":"","what":"era 0.2.0","title":"era 0.2.0","text":"First beta release, including: yr() constructor Functions getting setting era yr object: yr_era(), yr_era()<- yr_set_era() Format print methods yrs Vector arithmetic methods yrs era() constructor Format print methods eras Getter functions era parameters: era_label(), era_name(), era_epoch(), era_unit(), era_scale(), era_direction() eras() defining standard eras yr_transform() function converting years eras Function documentation introductory vignette: vignette(\"era\") NEWS.md file track changes package.","code":""},{"path":"https://era.joeroe.io/news/index.html","id":"era-010","dir":"Changelog","previous_headings":"","what":"era 0.1.0","title":"era 0.1.0","text":"Initial development version.","code":""}]
